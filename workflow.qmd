# Project Workflow

Most of my academic work uses R and R markdown (or more recently, Quarto) as a backbone.

## Motivation

The goal of this workflow is to allow you to work effectively in my lab, and to ensure that I and future students (including yourself!) know where things are and can rebuild them if necessary. For example, a peer reviewer may ask for changes to the analysis many months after you are gone. If you follow this workflow, the chances of me being able to productively use your work increase.

A workflow that you have probably used in the past consists of:

-   Keep data in a spreadsheet (Excel)

-   Do your analysis in the same spreadsheet

-   Copy a table or numbers from a spreadsheet into a document (Word)

-   Write about the analysis in Word

This workflow has its benefits, mainly simplicity. Excel definitely has its place. But there are *lots* of drawbacks.

First, spreadsheets tend to hide formulae or make them very difficult to read. For example, [JP Morgan Chase bank lost almost \$6 Billion when a trader believed a formula in an excel spreadsheet](https://www.forbes.com/sites/tomgroenfeldt/2013/02/19/solutions-to-spreadsheet-risk-post-jpms-london-whale/?sh=1e4fd67d4a26) that he couldn't see the error in, because the formula wasn't shown. It would be better to have clearly written methods and analysis, than to just show the numbers that go in that analysis.

Second, this method can rely on lots of manual tasks: push this button, copy this figure, update this number. Doing it once is easy, but what if I ask you to go back and change something? Will you remember every table that depends on that calculation? Or what if you leave and another student has to figure out what you did? It would be better to have a reproducible document that re-builds itself whenever the analysis changes.

This is the problem that R and R markdown solves. For example, I can embed R code into this document. I can load a library, read a dataset, and create a figure all at once.

```{r first_plot}
library(ggplot2)

ggplot(mpg, aes(displ, hwy, colour = class)) + 
  geom_point()
```

And if I tell you that I'd rather see a different figure, you can just change the code and it will print something different

```{r second_plot}
ggplot(mpg, aes(hwy, fill = class)) + 
  geom_density(alpha = 0.5) + theme_bw()
```

So, how do you make this happen?

## R Projects

The basis of every project --- a paper, thesis, or report --- should be an R project. An R project is a folder associated with an `.Rproj` file that can be created and opened in R Studio. For an introduction to installing R and Rstudio, there is a [tutorial at DataCamp](https://www.datacamp.com/tutorial/r-studio-tutorial).

The R project folder should be organized into these subfolders as follows:

    <project>/
      - README.md
      - <project.Rproj>
      - data/
      - R/
      - py/
      - ....

-   `README.md` is a markdown file that describes what the project is about. What is the central question, who is the project sponsor, and what other data resources might need to be referenced in the project.

-   `data/` is the folder where you place all of your input or intermediate data. There may be subfolders in this folder. Preference is for plain text (csv or json) data over data stored in spreadsheets or binary formats. If you get data from the internet, it might be better to write code to download the data instead of storing the downloaded data. That would be more reproducible.

-   `R/` is a folder where you write your R scripts. Each script should be clearly named, e.g., `data_cleaning.R` .

-   `py/` is a folder where you write your python scripts. Each script should be clearly named, e.g., `data_cleaning.py` .

Other folders might be useful, but should be carefully named and organized.[^rprojects-1] Additionally, it might be a good idea to put `README` file in some of the sub-folders if the information in them might need more explanation.

[^rprojects-1]: A more detailed and robust description of an R project folder is [here](https://www.chrisvoncsefalvay.com/2018/08/09/structuring-r-projects/).

> The LinkedIn Learning Course [R: Essential Training: Wrangling and Visualizing Data](https://www.linkedin.com/learning-login/share?account=2153100&forceAccount=false&redirect=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fr-essential-training-wrangling-and-visualizing-data%3Ftrk%3Dshare_ent_url%26shareId%3D079%252F6bFqRl2bLtOb519oUA%253D%253D) shows how to implement this
>
> For an introduction to installing R and R Studio, there is a [tutorial at DataCamp](https://www.datacamp.com/tutorial/r-studio-tutorial). Follow along with the tutorial if you are new to R and R Studio.
>
> If you are curious about projects, [there is a helpful R Studio resource page](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) with instructions on how they work.

## Git and GitHub

## Targets
