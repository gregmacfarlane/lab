{
  "hash": "d14665088e579447b4ae22e0b15e44d5",
  "result": {
    "markdown": "# Project Workflow\n\nMost of my academic work uses R and R markdown (or more recently, Quarto) as a backbone.\n\n## Motivation\n\nThe goal of this workflow is to allow you to work effectively in my lab, and to ensure that I and future students (including yourself!) know where things are and can rebuild them if necessary. For example, a peer reviewer may ask for changes to the analysis many months after you are gone. If you follow this workflow, the chances of me being able to productively use your work increase.\n\nA workflow that you have probably used in the past consists of:\n\n-   Keep data in a spreadsheet (Excel)\n\n-   Do your analysis in the same spreadsheet\n\n-   Copy a table or numbers from a spreadsheet into a document (Word)\n\n-   Write about the analysis in Word\n\nThis workflow has its benefits, mainly simplicity. Excel definitely has its place. But there are *lots* of drawbacks.\n\nFirst, spreadsheets tend to hide formulae or make them very difficult to read. For example, [JP Morgan Chase bank lost almost \\$6 Billion when a trader believed a formula in an excel spreadsheet](https://www.forbes.com/sites/tomgroenfeldt/2013/02/19/solutions-to-spreadsheet-risk-post-jpms-london-whale/?sh=1e4fd67d4a26) that he couldn't see the error in, because the formula wasn't shown. It would be better to have clearly written methods and analysis, than to just show the numbers that go in that analysis.\n\nSecond, this method can rely on lots of manual tasks: push this button, copy this figure, update this number. Doing it once is easy, but what if I ask you to go back and change something? Will you remember every table that depends on that calculation? Or what if you leave and another student has to figure out what you did? It would be better to have a reproducible document that re-builds itself whenever the analysis changes.\n\nThis is the problem that R and R markdown solves. For example, I can embed R code into this document. I can load a library, read a dataset, and create a figure all at once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mpg, aes(displ, hwy, colour = class)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](workflow_files/figure-pdf/first_plot-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nAnd if I tell you that I'd rather see a different figure, you can just change the code and it will print something different\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy, fill = class)) + \n  geom_density(alpha = 0.5) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](workflow_files/figure-pdf/second_plot-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nSo, how do you make this happen?\n\n## R Projects\n\nThe basis of every project --- a paper, thesis, or report --- should be an R project. An R project is a folder associated with an `.Rproj` file that can be created and opened in R Studio. For an introduction to installing R and Rstudio, there is a [tutorial at DataCamp](https://www.datacamp.com/tutorial/r-studio-tutorial).\n\nThe R project folder should be organized into these subfolders as follows:\n\n    <project>/\n      - README.md\n      - <project.Rproj>\n      - data/\n      - R/\n      - py/\n      - ....\n\n-   `README.md` is a markdown file that describes what the project is about. What is the central question, who is the project sponsor, and what other data resources might need to be referenced in the project.\n\n-   `data/` is the folder where you place all of your input or intermediate data. There may be subfolders in this folder. Preference is for plain text (csv or json) data over data stored in spreadsheets or binary formats. If you get data from the internet, it might be better to write code to download the data instead of storing the downloaded data. That would be more reproducible.\n\n-   `R/` is a folder where you write your R scripts. Each script should be clearly named, e.g., `data_cleaning.R` .\n\n-   `py/` is a folder where you write your python scripts. Each script should be clearly named, e.g., `data_cleaning.py` .\n\nWhen you type a path in a script, it should reference its location *relative to the folder root*. So a script in `R/clean_data.R` might look like this:\n\n``` r\n# read data from folder\ndata <- read_csv(\"data/my_data.csv\")\n```\n\nThis lets other people who work on your project use it without changing all the paths to the all the files that you use. Or as Jenny Bryan put it,\n\n> If the first line of your #rstats script is`setwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")`, I will come into your lab and SET YOUR COMPUTER ON FIRE.\n\nOther folders might be useful, but should be carefully named and organized.[^workflow-1] Additionally, it might be a good idea to put `README` file in some of the sub-folders if the information in them might need more explanation.\n\n[^workflow-1]: A more detailed and robust description of an R project folder is [here](https://www.chrisvoncsefalvay.com/2018/08/09/structuring-r-projects/).\n\n> The LinkedIn Learning Course [R: Essential Training: Wrangling and Visualizing Data](https://www.linkedin.com/learning-login/share?account=2153100&forceAccount=false&redirect=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fr-essential-training-wrangling-and-visualizing-data%3Ftrk%3Dshare_ent_url%26shareId%3D079%252F6bFqRl2bLtOb519oUA%253D%253D) shows how to implement this folder structure and an R Studio project\n>\n> For an introduction to installing R and R Studio, there is a [tutorial at DataCamp](https://www.datacamp.com/tutorial/r-studio-tutorial). Follow along with the tutorial if you are new to R and R Studio.\n>\n> If you are curious about projects, [there is a helpful R Studio resource page](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) with instructions on how they work.\n\n## Git and GitHub\n\nYour project directory should be a git repository that is posted to GitHub.\n\nGit is software that tracks changes to plain text documents line-by-line, over time. It also provides robust methods for merging conflicting documents written by different users. No longer will you need to have a folder that contains the following:\n\n    my_document.docx\n    my_document edits from advisor.docx\n    my_document final.docx\n    my_documentREALLYFINAL.docx\n    my_documentREALLYFINAL_edits from advisor.docx\n\nWhen used correctly with good commit messages, git can serve as an excellent lab notebook for the project. Some basic rules for working with git:\n\n-   **Commit regularly** Keep your working directory clean! Don't let dozens of different changes pile up between commits\n\n-   **Write good messages** A good commit message will help you and me trace what is going on, and see what matters. A primer on writing good messages is [here](https://www.freecodecamp.org/news/writing-good-commit-messages-a-practical-guide/); learn this and do it consistently!\n\n-   **Ignore files correctly** If it is a file that you actually worked on, then it should be committed and tracked. But if you don't know what it is, then there's a good chance that it was created as a byproduct and should be ignored. You don't want hundreds of files clogging up your git commit list. Also, any project data that is not supposed to be distributed must be ignored.\n\nGitHub is a web service that hosts git repositories, allowing git users to share code with each other and back it up on the internet. You are welcome to create private repositories for your own use and exploration, but work done for the lab should be in the [BYU-Transpolab organization](https://github.com/byu-transpolab). Repositories can be public if possible or private if necessary.\n\n> The LinkedIn Learning Course [Learning Git and Github](https://www.linkedin.com/learning-login/share?account=2153100&forceAccount=false&redirect=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Flearning-git-and-github-14213624%3Ftrk%3Dshare_ent_url%26shareId%3DMbR%252FIb35SFSq%252BWIOnc2cxQ%253D%253D) provides a clear tutorial with installation instructions and basic commands.\n>\n> Jenny Bryan has an excellent book / course on using Git and GitHub with R, [called Happy Git and GitHub for the userR](https://happygitwithr.com/index.html). Follow these instructions.\n\n## Box\n\nThere are some kinds of documents that do not lend themselves very naturally to Git/ GitHub. Word documents, for example cannot be tracked line-by-line. GitHub also has a 50 MB soft file size limit (and a 100 MB hard limit).\n\nBYU has given you free access to unlimited space on Box.\n\n## R Markdown / Quarto\n\n## Targets\n\nFor small projects where all the calculations can occur on render, it makes sense to just have\n",
    "supporting": [
      "workflow_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}